<doc:xqdoc xmlns:doc="http://www.xqdoc.org/1.0"><doc:control><!--Generated by xquerydoc: http://github.com/xquery/xquerydoc--><doc:version>N/A</doc:version></doc:control><doc:module type="library"><doc:uri>http://marklogic.com/json</doc:uri></doc:module><doc:variables><doc:variable><doc:uri>new-line-regex</doc:uri></doc:variable></doc:variables><doc:functions><doc:function><doc:name>escape</doc:name><doc:signature>($s as xs:string) as  xs:string</doc:signature><doc:parameters><doc:parameter><doc:name>s</doc:name><doc:type> xs:string</doc:type></doc:parameter></doc:parameters><doc:return><doc:type> xs:string</doc:type></doc:return></doc:function><doc:function><doc:name>atomize</doc:name><doc:signature>($x as element()) as  xs:string</doc:signature><doc:parameters><doc:parameter><doc:name>x</doc:name><doc:type> element()</doc:type></doc:parameter></doc:parameters><doc:return><doc:type> xs:string</doc:type></doc:return></doc:function><doc:function><doc:name>print-value</doc:name><doc:signature>($x as element()) as  xs:string</doc:signature><doc:parameters><doc:parameter><doc:name>x</doc:name><doc:type> element()</doc:type></doc:parameter></doc:parameters><doc:return><doc:type> xs:string</doc:type></doc:return></doc:function><doc:function><doc:name>print-name-value</doc:name><doc:signature>($x as element()) as  xs:string?</doc:signature><doc:parameters><doc:parameter><doc:name>x</doc:name><doc:type> element()</doc:type></doc:parameter></doc:parameters><doc:return><doc:type occurrence="?"> xs:string</doc:type></doc:return></doc:function><doc:function><doc:comment><doc:description>Transforms an XML element into a JSON string representation.  See http://json.org.<p/>Sample usage:<pre>xquery version "1.0-ml";import module namespace json="http://marklogic.com/json" at "json.xqy";json:serialize(&amp;lt;foo&amp;gt;&amp;lt;bar&amp;gt;kid&amp;lt;/bar&amp;gt;&amp;lt;/foo&amp;gt;)</pre>Sample transformations:<p/>Namespace URIs are ignored.  Namespace prefixes are included in the JSON name.<p/>Attributes are ignored, except for the special attribute </doc:description><doc:custom tag="array">="true" thatindicates the JSON serialization should write the node, even if single, as anarray, and the attribute </doc:custom><doc:custom tag="type"> that can be set to "boolean" or "number" todictate the value should be written as that type (unquoted).  There's alsoan </doc:custom><doc:custom tag="quote"> attribute that when set to true writes the inner content as textrather than as structured JSON, useful for sending some XHTML over thewire.<p/>Text nodes within mixed content are ignored.</doc:custom><doc:param> $x Element node to convert</doc:param><doc:return> String holding JSON serialized representation of $x</doc:return><doc:author> Jason Hunter</doc:author><doc:version> 1.0.1Ported to xquery 1.0-ml; double escaped backslashes in json:escape</doc:version></doc:comment><doc:name>serialize</doc:name><doc:signature>($x as element()) as  xs:string</doc:signature><doc:parameters><doc:parameter><doc:name>x</doc:name><doc:type> element()</doc:type></doc:parameter></doc:parameters><doc:return><doc:type> xs:string</doc:type></doc:return></doc:function></doc:functions></doc:xqdoc>
